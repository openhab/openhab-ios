# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
    before_all do |lane, options|
        if is_ci? && "#{lane}" != "unittests"
            ensure_env_vars(
                env_vars: %w[ASC_API_KEY ASC_API_KEY_ID ASC_API_KEY_ISSUER_ID]
            )
        end

        if !ENV['ASC_API_KEY_ID'].nil? && !ENV['ASC_API_KEY_ISSUER_ID'].nil? && !ENV['ASC_API_KEY'].nil?
            app_store_connect_api_key(
                key_id: ENV['ASC_API_KEY_ID'],
                issuer_id: ENV['ASC_API_KEY_ISSUER_ID'],
                key_content: ENV['ASC_API_KEY'],
                duration: 1200,
                in_house: false
            )
        end
    end

    desc "Create match certificates"
    lane :certificates do
        match(
            type: 'appstore',
            keychain_name: is_ci? ? 'action_keychain' : nil,
            keychain_password: is_ci? ? ENV['KEYCHAIN_PASSWORD'] : nil
        )
    end

    desc 'Generate new localized screenshots'
    lane :screenshots do
        capture_screenshots(workspace: 'openHAB.xcworkspace',
                            scheme: 'openHABUITests',
                            dark_mode: true)
    end

    desc 'Run unit tests.'
    lane :unittests do
        run_tests(
            workspace: 'openHAB.xcworkspace',
            scheme: 'openHABTestsSwift',
            xcargs: '-skipPackagePluginValidation',
            testplan: 'openHABTests',
            devices: ['iPhone 13 Pro'],
            clean: true
        )
    end

    desc 'Clean spm build artifacts.'
    private_lane :clean_spm do
        spm(
            command: "clean",
            package_path: "OpenHABCore"
        )
    end

    desc 'Build beta'
    lane :beta do |options|
        # check the semantic parameter entered
        raise 'No bump type defined! Use one of: patch | minor | major'.red unless options[:bump]

        if is_ci?
            current_branch = ENV["BRANCH_NAME"]
        else
            current_branch = sh("git branch --show-current")
        end

        if current_branch != "develop"
            options[:isfeaturebuild] = true
        else
            options[:isfeaturebuild] = false
        end

        # ensure branch is clean
        ensure_git_status_clean

        # setup code signing
        setup_keychain
        certificates

        # run unit tests
        unittests

        increment_build

        type = options[:bump]

        if !options[:isfeaturebuild]
            increment_version_number_in_xcodeproj(
                bump_type: type,
                xcodeproj: 'openHAB.xcodeproj',
                scheme: 'openHAB'
            )
        end
        increment_version_if_required
        # NOTE: this resolves packages of the project so need to clean
        sh("cd .. && git clean -fd")

        build_number = get_build_number
        version = get_version_number(xcodeproj: 'openHAB.xcodeproj',
                                     target: 'openHAB')

        # get the last commit comments from Git history
        # and creates our changelog
        comments = changelog_from_git_commits(
            between: last_git_tag == nil ? nil : [last_git_tag, 'HEAD'],
            pretty: '- %s',
            date_format: 'short',
            match_lightweight_tag: false,
            merge_commit_filtering: 'exclude_merges'
        )

        changelog = read_changelog # Read changelog

        if !options[:isfeaturebuild]
            stamp_changelog(section_identifier: "Version #{version}, Build #{build_number}") # Stamp Unreleased section with newly released build number
        end

        clean_build_artifacts

        # build and upload to TestFlight
        build_app(
            scheme: 'openHAB',
            clean: true,
            xcargs: '-skipPackagePluginValidation',
            export_method: 'app-store',
            disable_package_automatic_updates: true
        )

        upload_to_testflight(
            skip_submission: options[:isfeaturebuild],
            distribute_external: !options[:isfeaturebuild],
            notify_external_testers: !options[:isfeaturebuild],
            changelog: changelog,
            groups: ['Beta Testers']
        )

        # commit to git the changes from bumping version number
        commit_version_bump(
            message: "committed version bump: #{version} (#{build_number})",
            xcodeproj: 'openHAB.xcodeproj',
            include: %w[CHANGELOG.md]
        )
        if is_ci?
            sh 'git commit --amend --no-edit --signoff --author="openhab-bot <info@openhabfoundation.org>"'
        else
            sh 'git commit --amend --no-edit --signoff'
        end

        # push bump commit
        ensure_git_status_clean
        push_to_git_remote

        # merge into main and tag if not a feature build
        if !options[:isfeaturebuild]
            sh 'git checkout main && git merge develop --no-ff'
            add_git_tag(
                message: changelog,
                tag: version.to_s
            )
            push_to_git_remote(tags: true)
            sh 'git checkout develop'

            set_github_release(
              api_token: is_ci? ? ENV['ACCESS_TOKEN'] : ENV['GITHUB_API_TOKEN'],
              repository_name: 'openhab/openhab-ios',
              name: "#{type.capitalize} version #{version}",
              tag_name: version.to_s,
              description: changelog,
              commitish: 'main'
              # upload_assets: no assets supported
            )
        end

    end

    desc 'Setup keychain for CI environment'
    private_lane :setup_keychain do
        if is_ci?
            create_keychain(
                name: 'action_keychain',
                password: ENV['KEYCHAIN_PASSWORD'],
                default_keychain: true,
                unlock: true,
                timeout: 3600,
                lock_when_sleeps: false
            )
        end
    end

    desc 'Increment the build number.'
    private_lane :increment_build do
        xcode_build = get_build_number.to_i
        testflight_build = latest_testflight_build_number
        build_no = (xcode_build > testflight_build ? xcode_build : testflight_build) + 1

        increment_build_number_in_xcodeproj(
            build_number: "#{build_no}"
        )
    end

    desc 'Increment the version number if required.'
    private_lane :increment_version_if_required do
        if !is_ci?
            Spaceship::ConnectAPI::login(portal_team_id: "PBAPXHRAM9", tunes_team_id: "118429042")
        end

        app = Spaceship::ConnectAPI::App.find("es.spaphone.openhab")
        UI.message("Found app: #{app.name}")

        platform = Spaceship::ConnectAPI::Platform::IOS
        liveVersion = Gem::Version.new(app.get_live_app_store_version(platform: platform).version_string)
        UI.message("Found live version: #{liveVersion.version()}")

        projectVersion = Gem::Version.new(get_version_number(xcodeproj: "openHAB.xcodeproj", target: "openHAB"))
        UI.message("Found project version: #{projectVersion.version()}")

        if liveVersion >= projectVersion
            UI.message("Pre-release train is closed. Bumping patch version.")

            while liveVersion >= projectVersion
                increment_version_number_in_xcodeproj(
                    bump_type: "patch",
                    xcodeproj: 'openHAB.xcodeproj',
                    scheme: 'openHAB'
                )
                projectVersion = Gem::Version.new(get_version_number(xcodeproj: "openHAB.xcodeproj", target: "openHAB"))
            end
        else
            UI.message("Pre-release train is open. No action required.")
        end
    end
end
